{"ast":null,"code":"import { single } from './data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChartComponent {\n  constructor(http) {\n    this.http = http;\n    this.view = [700, 400];\n    this.colorScheme = {\n      domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']\n    };\n    this.gradient = false;\n    this.showLegend = false;\n    this.showXAxis = true;\n    this.showYAxis = true;\n    this.showXAxisLabel = true;\n    this.showYAxisLabel = true;\n    this.xAxisLabel = 'Time';\n    this.yAxisLabel = 'Price';\n    Object.assign(this, {\n      single\n    });\n  }\n  ngOnInit() {\n    const url = 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo';\n    this.http.get(url).subscribe(data => {\n      const timeSeries = data['Time Series (5min)'];\n      const chartData = [];\n      for (const key in timeSeries) {\n        if (timeSeries.hasOwnProperty(key)) {\n          const item = {\n            name: key,\n            value: parseFloat(timeSeries[key]['4. close'])\n          };\n          chartData.push(item);\n        }\n      }\n      this.chartData = [{\n        name: 'IBM',\n        series: chartData\n      }];\n    });\n  }\n  onSelect(event) {\n    console.log(event);\n  }\n}\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"app-chart\"]],\n  decls: 2,\n  vars: 11,\n  consts: [[2, \"display\", \"block\"], [3, \"view\", \"scheme\", \"results\", \"gradient\", \"xAxis\", \"yAxis\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxisLabel\", \"yAxisLabel\", \"select\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"ngx-charts-line-chart\", 1);\n      i0.ɵɵlistener(\"select\", function ChartComponent_Template_ngx_charts_line_chart_select_1_listener($event) {\n        return ctx.onSelect($event);\n      });\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"view\", ctx.view)(\"scheme\", ctx.colorScheme)(\"results\", ctx.chartData)(\"gradient\", ctx.gradient)(\"xAxis\", ctx.showXAxis)(\"yAxis\", ctx.showYAxis)(\"legend\", ctx.showLegend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAASA,MAAM,QAAQ,QAAQ;;;AAM/B,OAAM,MAAOC,cAAc;EAezBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAdxB,SAAI,GAAU,CAAC,GAAG,EAAE,GAAG,CAAC;IACxB,gBAAW,GAAG;MACZC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;KACpD;IAED,aAAQ,GAAG,KAAK;IAChB,eAAU,GAAG,KAAK;IAClB,cAAS,GAAG,IAAI;IAChB,cAAS,GAAG,IAAI;IAChB,mBAAc,GAAG,IAAI;IACrB,mBAAc,GAAG,IAAI;IACrB,eAAU,GAAG,MAAM;IACnB,eAAU,GAAG,OAAO;IAGlBC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;MAAEN;IAAM,CAAE,CAAC;EACjC;EAEAO,QAAQ;IACN,MAAMC,GAAG,GAAG,sGAAsG;IAClH,IAAI,CAACL,IAAI,CAACM,GAAG,CAACD,GAAG,CAAC,CAACE,SAAS,CAACC,IAAI,IAAG;MAClC,MAAMC,UAAU,GAAGD,IAAI,CAAC,oBAAoB,CAAC;MAC7C,MAAME,SAAS,GAAG,EAAE;MACpB,KAAK,MAAMC,GAAG,IAAIF,UAAU,EAAE;QAC5B,IAAIA,UAAU,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;UAClC,MAAME,IAAI,GAAG;YACXC,IAAI,EAAEH,GAAG;YACTI,KAAK,EAAEC,UAAU,CAACP,UAAU,CAACE,GAAG,CAAC,CAAC,UAAU,CAAC;WAC9C;UACDD,SAAS,CAACO,IAAI,CAACJ,IAAI,CAAC;;;MAGxB,IAAI,CAACH,SAAS,GAAG,CACf;QACEI,IAAI,EAAE,KAAK;QACXI,MAAM,EAAER;OACT,CACF;IACH,CAAC,CAAC;EACJ;EAEAS,QAAQ,CAACC,KAAK;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;;AA5CWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAyB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCR3BC,8BAA6B;MAazBA;QAAA,OAAUC,oBAAgB;MAAA,EAAC;MAC7BD,iBAAwB;;;MAZtBA,eAAa;MAAbA,+BAAa","names":["single","ChartComponent","constructor","http","domain","Object","assign","ngOnInit","url","get","subscribe","data","timeSeries","chartData","key","hasOwnProperty","item","name","value","parseFloat","push","series","onSelect","event","console","log","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Programming\\FrontEnd_421\\Homework4\\src\\app\\chart\\chart.component.ts","C:\\Programming\\FrontEnd_421\\Homework4\\src\\app\\chart\\chart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { single } from './data';\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\nexport class ChartComponent implements OnInit {\n  view: any[] = [700, 400];\n  colorScheme = {\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']\n  };\n  chartData: any[];\n  gradient = false;\n  showLegend = false;\n  showXAxis = true;\n  showYAxis = true;\n  showXAxisLabel = true;\n  showYAxisLabel = true;\n  xAxisLabel = 'Time';\n  yAxisLabel = 'Price';\n\n  constructor(private http: HttpClient) {\n    Object.assign(this, { single });\n  }\n\n  ngOnInit() {\n    const url = 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo';\n    this.http.get(url).subscribe(data => {\n      const timeSeries = data['Time Series (5min)'];\n      const chartData = [];\n      for (const key in timeSeries) {\n        if (timeSeries.hasOwnProperty(key)) {\n          const item = {\n            name: key,\n            value: parseFloat(timeSeries[key]['4. close'])\n          };\n          chartData.push(item);\n        }\n      }\n      this.chartData = [\n        {\n          name: 'IBM',\n          series: chartData\n        }\n      ];\n    });\n  }\n\n  onSelect(event) {\n    console.log(event);\n  }\n\n}\n","<div style=\"display: block;\">\n  <ngx-charts-line-chart\n    [view]=\"view\"\n    [scheme]=\"colorScheme\"\n    [results]=\"chartData\"\n    [gradient]=\"gradient\"\n    [xAxis]=\"showXAxis\"\n    [yAxis]=\"showYAxis\"\n    [legend]=\"showLegend\"\n    [showXAxisLabel]=\"showXAxisLabel\"\n    [showYAxisLabel]=\"showYAxisLabel\"\n    [xAxisLabel]=\"xAxisLabel\"\n    [yAxisLabel]=\"yAxisLabel\"\n    (select)=\"onSelect($event)\">\n  </ngx-charts-line-chart>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
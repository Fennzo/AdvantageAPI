{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ChartComponent {\n  constructor() {\n    this.chart_name = '';\n    this.timeSeriesData = [];\n    this.forex_info = '';\n  }\n  ngOnInit() {\n    google.charts.load('current', {\n      packages: ['corechart']\n    });\n    google.charts.setOnLoadCallback(() => this.drawChart());\n  }\n  drawChart() {\n    const dataTable = new google.visualization.DataTable();\n    dataTable.addColumn('string', 'Time');\n    dataTable.addColumn('number', 'Open');\n    dataTable.addColumn('number', 'High');\n    dataTable.addColumn('number', 'Low');\n    dataTable.addColumn('number', 'Close');\n    dataTable.addRows(this.parseChartData());\n    const chartOptions = {\n      title: this.chart_name,\n      height: 500,\n      width: 900,\n      legend: {\n        position: 'bottom'\n      }\n    };\n    const chart = new google.visualization.CandlestickChart(document.getElementById('chartContainer'));\n    chart.draw(dataTable, chartOptions);\n  }\n  parseChartData() {\n    const timeSeries = [];\n    console.log(\"data\", this.data);\n    // stock\n    if ('Time Series (5min)' in this.data) {\n      this.chart_name = this.data[\"Meta Data\"][\"2. Symbol\"] + 'stock price';\n      this.timeSeriesData = this.data['Time Series (5min)'];\n    }\n    // forex\n    else if ('Time Series FX (Daily)') {\n      this.forex_info = \"1 \" + this.data[\"Meta Data\"][\"2. From Symbol\"] + \" to \" + this.data[\"Meta Data\"][\"3. To Symbol\"] + this.forex_data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"] + \" \" + this.forex_data[\"Realtime Currency Exchange Rate\"][\"6. Last Refreshed\"] + \" \" + this.forex_data[\"Realtime Currency Exchange Rate\"][\"7. Time Zone\"];\n      this.chart_name = this.data[\"Meta Data\"][\"2. From Symbol\"] + ' To ' + this.data[\"Meta Data\"][\"3. To Symbol\"];\n      this.timeSeriesData = this.data['Time Series FX (Daily)'];\n      console.log(\"forex_info\", this.forex_info);\n      console.log(\"chart_name\", this.chart_name);\n    } else if ('Error Message') {\n      this.forex_info = \"Not available! Please choose another option\";\n    }\n    for (const key in this.timeSeriesData) {\n      if (this.timeSeriesData.hasOwnProperty(key)) {\n        const time = new Date(key).toISOString();\n        const open = parseFloat(this.timeSeriesData[key]['1. open']);\n        const high = parseFloat(this.timeSeriesData[key]['2. high']);\n        const low = parseFloat(this.timeSeriesData[key]['3. low']);\n        const close = parseFloat(this.timeSeriesData[key]['4. close']);\n        timeSeries.push([time, open, high, low, close]);\n      }\n    }\n    return timeSeries;\n  }\n}\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)();\n};\nChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"app-chart\"]],\n  inputs: {\n    data: \"data\",\n    forex_data: \"forex_data\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[\"id\", \"chartContainer\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.forex_info);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["ChartComponent","constructor","ngOnInit","google","charts","load","packages","setOnLoadCallback","drawChart","dataTable","visualization","DataTable","addColumn","addRows","parseChartData","chartOptions","title","chart_name","height","width","legend","position","chart","CandlestickChart","document","getElementById","draw","timeSeries","console","log","data","timeSeriesData","forex_info","forex_data","key","hasOwnProperty","time","Date","toISOString","open","parseFloat","high","low","close","push","selectors","inputs","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Programming\\FrontEnd_421\\Homework4\\src\\app\\chart\\chart.component.ts","C:\\Programming\\FrontEnd_421\\Homework4\\src\\app\\chart\\chart.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\n\ndeclare var google: any;\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\nexport class ChartComponent implements OnInit {\n\n  @Input() data: any;\n  chart_name = '';\n  timeSeriesData = [];\n  @Input() forex_data: any;\n  forex_info = '';\n\n  constructor() {\n\n  }\n\n  ngOnInit(): void {\n    google.charts.load('current', { packages: ['corechart'] });\n    google.charts.setOnLoadCallback(() => this.drawChart());\n  }\n\n  drawChart(): void {\n    const dataTable = new google.visualization.DataTable();\n    dataTable.addColumn('string', 'Time');\n    dataTable.addColumn('number', 'Open');\n    dataTable.addColumn('number', 'High');\n    dataTable.addColumn('number', 'Low');\n    dataTable.addColumn('number', 'Close');\n    dataTable.addRows(this.parseChartData());\n\n    const chartOptions = {\n      title: this.chart_name,\n      height: 500,\n      width: 900,\n      legend: { position: 'bottom' }\n    };\n\n    const chart = new google.visualization.CandlestickChart(document.getElementById('chartContainer'));\n    chart.draw(dataTable, chartOptions);\n  }\n\n  parseChartData(): any[] {\n    const timeSeries = [];\n    console.log(\"data\", this.data);\n\n    // stock\n    if ('Time Series (5min)' in this.data){\n      this.chart_name = this.data[\"Meta Data\"][\"2. Symbol\"] + 'stock price'\n    this.timeSeriesData = this.data['Time Series (5min)'];}\n    // forex\n    else if ('Time Series FX (Daily)'){\n      this.forex_info = \"1 \" + this.data[\"Meta Data\"][\"2. From Symbol\"] + \" to \" + this.data[\"Meta Data\"][\"3. To Symbol\"] + this.forex_data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"] + \" \" + this.forex_data[\"Realtime Currency Exchange Rate\"][\"6. Last Refreshed\"] + \" \" + this.forex_data[\"Realtime Currency Exchange Rate\"][\"7. Time Zone\"]\n      this.chart_name = this.data[\"Meta Data\"][\"2. From Symbol\"] + ' To ' + this.data[\"Meta Data\"][\"3. To Symbol\"]\n      this.timeSeriesData = this.data['Time Series FX (Daily)'];\n      console.log(\"forex_info\", this.forex_info)\n      console.log(\"chart_name\", this.chart_name)\n    }\n    else if('Error Message'){\n      this.forex_info = \"Not available! Please choose another option\"\n    }\n\n    for (const key in this.timeSeriesData) {\n      if (this.timeSeriesData.hasOwnProperty(key)) {\n        const time = new Date(key).toISOString();\n        const open = parseFloat(this.timeSeriesData[key]['1. open']);\n        const high = parseFloat(this.timeSeriesData[key]['2. high']);\n        const low = parseFloat(this.timeSeriesData[key]['3. low']);\n        const close = parseFloat(this.timeSeriesData[key]['4. close']);\n\n        timeSeries.push([time, open, high, low, close]);\n      }\n    }\n\n    return timeSeries;\n  }\n}\n","<div id=\"chartContainer\">{{forex_info}}</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
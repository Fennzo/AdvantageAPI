{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ChartComponent {\n  constructor() {}\n  ngOnInit() {\n    google.charts.load('current', {\n      packages: ['corechart']\n    });\n    google.charts.setOnLoadCallback(() => this.drawChart());\n  }\n  drawChart() {\n    const dataTable = new google.visualization.DataTable();\n    dataTable.addColumn('string', 'Time');\n    dataTable.addColumn('number', 'Open');\n    dataTable.addColumn('number', 'High');\n    dataTable.addColumn('number', 'Low');\n    dataTable.addColumn('number', 'Close');\n    dataTable.addRows(this.parseChartData());\n    const chartOptions = {\n      title: 'IBM Stock Price',\n      height: 500,\n      width: 900,\n      legend: {\n        position: 'bottom'\n      }\n    };\n    const chart = new google.visualization.CandlestickChart(document.getElementById('chartContainer'));\n    chart.draw(dataTable, chartOptions);\n  }\n  parseChartData() {\n    const chartData = [];\n    const timeSeriesData = this.data['Time Series (5min)'];\n    for (const key in timeSeriesData) {\n      if (timeSeriesData.hasOwnProperty(key)) {\n        const time = new Date(key);\n        const open = parseFloat(timeSeriesData[key]['1. open']);\n        const high = parseFloat(timeSeriesData[key]['2. high']);\n        const low = parseFloat(timeSeriesData[key]['3. low']);\n        const close = parseFloat(timeSeriesData[key]['4. close']);\n        chartData.push([time, open, high, low, close]);\n      }\n    }\n    return chartData;\n  }\n}\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)();\n};\nChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"app-chart\"]],\n  inputs: {\n    data: \"data\"\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[2, \"display\", \"block\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"ngx-charts-line-chart\");\n      i0.ɵɵtext(2, \" [view]=\\\"view\\\" [scheme]=\\\"colorScheme\\\" [results]=\\\"data\\\" [legend]=\\\"showLegend\\\" [legendPosition]=\\\"legendPosition\\\" [showXAxisLabel]=\\\"showXAxisLabel\\\" [showYAxisLabel]=\\\"showYAxisLabel\\\" [xAxis]=\\\"xAxisLabel\\\" [yAxis]=\\\"yAxisLabel\\\" [timeline]=\\\"timeline\\\" \");\n      i0.ɵɵelementEnd()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AASA,OAAM,MAAOA,cAAc;EAIzBC,eAAgB;EAEhBC,QAAQ;IACNC,MAAM,CAACC,MAAM,CAACC,IAAI,CAAC,SAAS,EAAE;MAAEC,QAAQ,EAAE,CAAC,WAAW;IAAC,CAAE,CAAC;IAC1DH,MAAM,CAACC,MAAM,CAACG,iBAAiB,CAAC,MAAM,IAAI,CAACC,SAAS,EAAE,CAAC;EACzD;EAEAA,SAAS;IACP,MAAMC,SAAS,GAAG,IAAIN,MAAM,CAACO,aAAa,CAACC,SAAS,EAAE;IACtDF,SAAS,CAACG,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC;IACrCH,SAAS,CAACG,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC;IACrCH,SAAS,CAACG,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC;IACrCH,SAAS,CAACG,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC;IACpCH,SAAS,CAACG,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC;IACtCH,SAAS,CAACI,OAAO,CAAC,IAAI,CAACC,cAAc,EAAE,CAAC;IAExC,MAAMC,YAAY,GAAG;MACnBC,KAAK,EAAE,iBAAiB;MACxBC,MAAM,EAAE,GAAG;MACXC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;QAAEC,QAAQ,EAAE;MAAQ;KAC7B;IAED,MAAMC,KAAK,GAAG,IAAIlB,MAAM,CAACO,aAAa,CAACY,gBAAgB,CAACC,QAAQ,CAACC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IAClGH,KAAK,CAACI,IAAI,CAAChB,SAAS,EAAEM,YAAY,CAAC;EACrC;EAEAD,cAAc;IACZ,MAAMY,SAAS,GAAG,EAAE;IACpB,MAAMC,cAAc,GAAG,IAAI,CAACC,IAAI,CAAC,oBAAoB,CAAC;IAEtD,KAAK,MAAMC,GAAG,IAAIF,cAAc,EAAE;MAChC,IAAIA,cAAc,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;QACtC,MAAME,IAAI,GAAG,IAAIC,IAAI,CAACH,GAAG,CAAC;QAC1B,MAAMI,IAAI,GAAGC,UAAU,CAACP,cAAc,CAACE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;QACvD,MAAMM,IAAI,GAAGD,UAAU,CAACP,cAAc,CAACE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;QACvD,MAAMO,GAAG,GAAGF,UAAU,CAACP,cAAc,CAACE,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAMQ,KAAK,GAAGH,UAAU,CAACP,cAAc,CAACE,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;QAEzDH,SAAS,CAACY,IAAI,CAAC,CAACP,IAAI,EAAEE,IAAI,EAAEE,IAAI,EAAEC,GAAG,EAAEC,KAAK,CAAC,CAAC;;;IAIlD,OAAOX,SAAS;EAClB;;AAhDW1B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAuC;EAAAC;IAAAZ;EAAA;EAAAa;EAAAC;EAAAC;EAAAC;IAAA;MCT3BC,8BAA8B;MAE1BA,uRAUF;MAAAA,iBAAwB","names":["ChartComponent","constructor","ngOnInit","google","charts","load","packages","setOnLoadCallback","drawChart","dataTable","visualization","DataTable","addColumn","addRows","parseChartData","chartOptions","title","height","width","legend","position","chart","CandlestickChart","document","getElementById","draw","chartData","timeSeriesData","data","key","hasOwnProperty","time","Date","open","parseFloat","high","low","close","push","selectors","inputs","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Programming\\FrontEnd_421\\Homework4\\src\\app\\chart\\chart.component.ts","C:\\Programming\\FrontEnd_421\\Homework4\\src\\app\\chart\\chart.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\n\ndeclare var google: any;\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\nexport class ChartComponent implements OnInit {\n\n  @Input() data: any;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    google.charts.load('current', { packages: ['corechart'] });\n    google.charts.setOnLoadCallback(() => this.drawChart());\n  }\n\n  drawChart(): void {\n    const dataTable = new google.visualization.DataTable();\n    dataTable.addColumn('string', 'Time');\n    dataTable.addColumn('number', 'Open');\n    dataTable.addColumn('number', 'High');\n    dataTable.addColumn('number', 'Low');\n    dataTable.addColumn('number', 'Close');\n    dataTable.addRows(this.parseChartData());\n\n    const chartOptions = {\n      title: 'IBM Stock Price',\n      height: 500,\n      width: 900,\n      legend: { position: 'bottom' }\n    };\n\n    const chart = new google.visualization.CandlestickChart(document.getElementById('chartContainer'));\n    chart.draw(dataTable, chartOptions);\n  }\n\n  parseChartData(): any[] {\n    const chartData = [];\n    const timeSeriesData = this.data['Time Series (5min)'];\n\n    for (const key in timeSeriesData) {\n      if (timeSeriesData.hasOwnProperty(key)) {\n        const time = new Date(key);\n        const open = parseFloat(timeSeriesData[key]['1. open']);\n        const high = parseFloat(timeSeriesData[key]['2. high']);\n        const low = parseFloat(timeSeriesData[key]['3. low']);\n        const close = parseFloat(timeSeriesData[key]['4. close']);\n\n        chartData.push([time, open, high, low, close]);\n      }\n    }\n\n    return chartData;\n  }\n}\n","<div style=\"display: block;\" >\n  <ngx-charts-line-chart>\n    [view]=\"view\"\n    [scheme]=\"colorScheme\"\n    [results]=\"data\"\n    [legend]=\"showLegend\"\n    [legendPosition]=\"legendPosition\"\n    [showXAxisLabel]=\"showXAxisLabel\"\n    [showYAxisLabel]=\"showYAxisLabel\"\n    [xAxis]=\"xAxisLabel\"\n    [yAxis]=\"yAxisLabel\"\n    [timeline]=\"timeline\"\n  </ngx-charts-line-chart>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}